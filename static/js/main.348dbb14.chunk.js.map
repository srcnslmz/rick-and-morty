{"version":3,"sources":["components/characters/AllCharacters.js","components/characters/Character.js","components/App.js","serviceWorker.js","index.js"],"names":["API_URL","AllCharacters","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleScroll","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","pageYOffset","getCharacters","_this$state","state","page","characters","axios","get","concat","then","res","r","data","results","newCharacters","setState","error","catch","err","height","_this2","addEventListener","removeEventListener","_this$state2","react_default","a","createElement","Fragment","className","keys","map","character","i","key","src","react_router_dom","to","pathname","Component","Character","getEpisodes","episode","location","length","splitEpisodes","episodes","newEpisode","split","push","goBack","history","undefined","class","width","onClick","React","App","react_router","path","exact","component","Boolean","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348dbb14.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst API_URL = \"https://rickandmortyapi.com/api/character/\"\r\n\r\nclass AllCharacters extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            characters: [],\r\n            height: window.innerHeight,\r\n            page: 2\r\n        }\r\n    }\r\n    handleScroll = () => {\r\n        const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\r\n        const body = document.body;\r\n        const html = document.documentElement;\r\n        const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\r\n        const windowBottom = windowHeight + window.pageYOffset;\r\n        if (windowBottom >= docHeight) {\r\n            this.getCharacters()\r\n        }\r\n    }\r\n    getCharacters = () => {\r\n        const { page, characters } = this.state\r\n        axios.get(API_URL+`?page=${page}`)\r\n            .then(res => {\r\n                const r = res.data.results;\r\n                const newCharacters = characters.concat(r)\r\n                this.setState({\r\n                    characters: newCharacters,\r\n                    page: page+1,\r\n                    error: false\r\n                    });\r\n            })\r\n            .catch(err => (\r\n                this.setState({\r\n                    error: true\r\n                })\r\n            ))\r\n    }\r\n    componentDidMount(){\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n        axios.get(API_URL)\r\n            .then(res => {\r\n                const characters = res.data.results;\r\n                this.setState({ characters });\r\n            })\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n    render() {\r\n        const { characters, error } = this.state\r\n        return (\r\n            <>\r\n                <header>\r\n                    <h1>The Rick and Morty</h1>\r\n                </header>\r\n                <div className=\"character-wrapper\">\r\n                    {\r\n                        characters &&\r\n                        <div className=\"character-list\">\r\n                            {Object.keys(characters).map((character, i) => (\r\n                                <figure className=\"character-figure\" key={i}>\r\n                                    <img src={characters[character]['image']} />\r\n                                    <div className=\"tag\">\r\n                                        <span className=\"name\">Rick</span>\r\n                                        <span>and</span>\r\n                                        <span className=\"name\">Morty</span></div>\r\n                                    <figcaption>\r\n                                        <h3>{characters[character]['name']}</h3>\r\n                                    </figcaption>\r\n                                    <div className=\"hover\"><i className=\"ion-android-open\"></i></div>\r\n                                    <Link to={{\r\n                                        pathname: `/${characters[character]['id']}`,\r\n                                        state: {\r\n                                            character: characters[character]\r\n                                        }}}\r\n                                    />\r\n                                </figure>\r\n                            ))}\r\n                        </div>\r\n                    }\r\n                    {\r\n                        error &&\r\n                        <div>Something went wrong. Please try again later.</div>\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AllCharacters;\r\n","import React from 'react'\r\n\r\nclass Character extends React.Component {\r\n    getEpisodes = () => {\r\n        const { episode } = this.props.location.state.character\r\n        var i=0;\r\n        if(episode.length < 5){\r\n            return this.splitEpisodes(episode, i)\r\n        }\r\n        else if(episode.length >=5){\r\n            i = episode.length - 5\r\n            return this.splitEpisodes(episode, i)\r\n        }\r\n    }\r\n    splitEpisodes = (episode, i) => {\r\n        var episodes = []\r\n        for(i; i<episode.length; i++){\r\n            var newEpisode = episode[i].split(\"/episode/\")\r\n            if(i === episode.length-1){\r\n                episodes.push(newEpisode[1])\r\n            }else{\r\n                episodes.push(newEpisode[1]+', ')\r\n            }\r\n        }\r\n        return episodes\r\n    }\r\n    goBack = () => {\r\n        this.props.history.goBack();\r\n    }\r\n    render() {\r\n        const { character } = this.props.location.state\r\n        if(character === undefined || character === ''){\r\n            return true\r\n        }\r\n        return(\r\n            <div class=\"c-wrapper\">\r\n                <div class=\"product-img\">\r\n                    <img src={character['image']} height=\"420\" width=\"327\" />\r\n                </div>\r\n                <div class=\"product-info\">\r\n                    <div class=\"product-text\">\r\n                        <h1>{character['name']}</h1>\r\n                        <h2>{character['origin']['name']}</h2>\r\n                        <p>Last Episodes: {this.getEpisodes()}</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"backBtn\" onClick={this.goBack}>\r\n                    <span class=\"line tLine\"></span>\r\n                    <span class=\"line mLine\"></span>\r\n                    <span class=\"label\">Go Back</span>\r\n                    <span class=\"line bLine\"></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Character","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport AllCharacters from './characters/AllCharacters'\nimport Character from './characters/Character'\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n            <Route path=\"/\" exact component={AllCharacters} />\n            <Route path='/:id' exact component={Character} />\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}